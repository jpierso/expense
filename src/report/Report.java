/**
 * Package that contains classes that support the reporting feature
 */
package report;



import java.sql.*;
import java.util.Date;
import java.util.HashMap;
import java.io.*;

import db.Db;

/**
 * @author	Srivathsa PV
 * @email	pv.srivathsa@gmail.com
 * @date	15/01/2013
 * 
 * Reports are generated by the user to consolidate data and to represent them in a sensible way
 */
public class Report {
	/**
	 * Name of the table to which the class is mapped to
	 * 
	 * @var String
	 */
	private static String t_name = "REPORT";
	
	/**
	 * Unique id of the report
	 * 
	 * @var Integer
	 */
	private int reportid;
	
	/**
	 * Title of the report
	 * 
	 * @var String
	 */
	private String title;
	
	/**
	 * Description about the report
	 * 
	 * @var String
	 */
	private String description;
	
	/**
	 * Type of the report. Ex: MIS Report, Accounts report etc.
	 * 
	 * @var String
	 */
	private String type;
	
	/**
	 * Date on which the report was generated
	 * 
	 * @var String
	 */
	private String date;
	
	/**
	 * Id of the user who generated this report
	 * 
	 * @var String
	 */
	private String userid;
	
	/**
	 * The report file in blob format
	 * 
	 * @var String
	 */
	private String file;
	
	/**
	 * Boolean variable to set file flag
	 * 
	 * @var Boolean
	 */
	private boolean fileSet = false;
	
	/**
	 * Creates an empty object
	 */
	public Report() {}
	
	/**
	 * Fetches necessary data and initializes the variables
	 * 
	 * @param Integer
	 * Id of the report to be fetched (Optional)
	 * 
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public Report(int reportid) throws ClassNotFoundException, SQLException {
		Db db = new Db();
		db.connect();
		
		ResultSet rs = db.executeQuery("SELECT * FROM " + t_name + " WHERE REPORTID = " + reportid);
		rs.next();
		
		this.reportid = reportid;
		this.title = rs.getString("TITLE");
		this.description = rs.getString("DESCRIPTION");
		this.type = rs.getString("TYPE");
		this.date = rs.getString("DATE");
		this.userid = rs.getString("USERID");
		this.file = rs.getString("FILE");
		
		db.disconnect();
	}
	
	/**
	 * Gets the report id
	 * 
	 * @return Integer
	 */
	public int getReportid() {
		return this.reportid;
	}
	
	/**
	 * Gets the title of the report
	 * 
	 * @var String
	 */
	public String getTitle() {
		return this.title;
	}
	
	/**
	 * Sets the title of the report
	 * 
	 * @param String
	 */
	public void setTitle(String title) {
		this.title = title;
	}
	
	/**
	 * Gets the description of the report
	 * 
	 * @return String
	 */
	public String getDescription() {
		return this.description;
	}
	
	/**
	 * Sets the description of the report
	 * 
	 * @param String
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
	/**
	 * Gets the type of the report
	 * 
	 * @return String
	 */
	public String getType() {
		return this.type;
	}
	
	/**
	 * Sets the type of the report
	 * 
	 * @param String
	 */
	public void setType(String type) {
		this.type = type;
	}
	
	/**
	 * Gets the date on which the report was generated
	 * 
	 * @return String
	 */
	public String getDate() {
		return this.date;
	}
	
	/**
	 * Sets the date on which the report was generated
	 * 
	 * @param String
	 */
	public void setDate(String date) {
		this.date = date;
	}
	
	/**
	 * Gets the id of the user who generated this report
	 * 
	 * @return String
	 */
	public String getUserid() {
		return this.userid;
	}
	
	/**
	 * Sets the id of the user who generated this report
	 * 
	 * @param String
	 */
	public void setUserid(String userid) {
		this.userid = userid;
	}
	
	/**
	 * Gets the blob format file of the report
	 * 
	 * @return String
	 */
	public String getFile() {
		return this.file;
	}
	
	/**
	 * Sets the file content in blob format
	 * 
	 * @param String
	 */
	public void setFile(String file) {
		this.file = file;
		this.fileSet = true;
	}
	
	/**
	 * Saves the local values to the database
	 * 
	 * @return Boolean - Returns true on success
	 * 
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public boolean save() throws ClassNotFoundException, SQLException {
		Db db = new Db();
		db.connect();
		
		Connection con = db.getConnection();
		
		String query = "INSERT INTO REPORT(TITLE,DESCRIPTION,TYPE,DATE,USERID,FILE) VALUES(?,?,?,?,?,?)";
		
		PreparedStatement stmt;
		
		stmt=con.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);
		
		stmt.setString(1,this.title);
		stmt.setString(2,this.description);
		stmt.setString(3,this.type);
		stmt.setString(4,this.date);
		stmt.setString(5, this.userid);
		
		File file = new File(this.file);
		try {
			FileInputStream fis = new FileInputStream(file);
			stmt.setBinaryStream(6,(InputStream)fis,(int)(file.length()));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		stmt.executeUpdate();
		
		ResultSet rs = stmt.getGeneratedKeys();
		rs.next();
		this.reportid = rs.getInt(1);
		
		if(this.reportid > 0)
			return false;
		else 
			return true;
		
	}
	
	/**
	 * Returns a list of report objects
	 * 
	 * @param String - Column name as the filter parameter
	 * @param String - Value
	 * 
	 * @return Array[user.Report]
	 * 
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public static Report[] list(String column,String value) throws ClassNotFoundException, SQLException {
		Db db = new Db();
		db.connect();
		
		ResultSet rs = db.executeQuery("SELECT COUNT(*) FROM " + t_name + " WHERE " + column + " = '" + value + "'");
		rs.next();
		
		Report[] list = new Report[rs.getInt(1)];
		
		rs = db.executeQuery("SELECT * FROM " + t_name + " WHERE " + column + " = '" + value + "'");
		
		int i=0;
		while(rs.next()) {
			list[i++] = new Report(rs.getInt("REPORTID"));
		}
		
		return list;
	}
	
	/**
	 * Returns the count based on the values
	 * 
	 * @param String - Column name as filter parameter
	 * @param String - Value
	 * 
	 * @return Integer - The count
	 * 
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public static int count(String column,String value) throws ClassNotFoundException, SQLException {
		Db db = new Db();
		db.connect();
		
		ResultSet rs = db.executeQuery("SELECT COUNT(*) FROM " + t_name + " WHERE " + column + " = '" + value);
		rs.next();
		
		return rs.getInt(1);
	}
	
	/**
	 * Deletes the report
	 * 
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void delete() throws ClassNotFoundException, SQLException {
		Db db = new Db();
		db.connect();
		
		db.delete("REPORT", "REPORTID",Integer.toString(this.reportid));
		
		db.disconnect();
	}
}
